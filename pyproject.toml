[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "pytest-golden"
description = "Plugin for pytest that offloads expected outputs to data files"
readme = "README.md"
license = "MIT"
keywords = ["pytest", "pytest-plugin"]
authors = [
    {name = "Oleh Prypin", email = "oleh@pryp.in"},
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Framework :: Pytest",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Software Development :: Testing :: Unit",
    "Typing :: Typed",
]
dynamic = ["version"]
requires-python = ">=3.8"
dependencies = [
    "pytest >=6.1.2",
    "ruamel.yaml >=0.16.12, <1.0",
    "atomicwrites >=1.4.0",
    "testfixtures >=6.15.0",
]

[project.urls]
Documentation = "https://github.com/oprypin/pytest-golden/#readme"
Issues = "https://github.com/oprypin/pytest-golden/issues"
Source = "https://github.com/oprypin/pytest-golden"

[project.entry-points."pytest11"]
pytest-golden = "pytest_golden.plugin"

[tool.hatch.version]
path = "pytest_golden/__init__.py"

[tool.hatch.build.targets.sdist]
include = ["/pytest_golden", "/tests"]

[tool.hatch.envs.default.scripts]
all = [
    "hatch run style:fix",
    "hatch run types:check",
    "hatch run test:test",
]

[tool.hatch.envs.test]
dependencies = [
    "pytest",
    "pytest-golden",
]
[tool.hatch.envs.test.scripts]
test = [
    "pytest -q",
    "bash .tools/test.sh",
]

[tool.hatch.envs.types]
dependencies = [
    "mypy",
    "types-atomicwrites",
]
[tool.hatch.envs.types.scripts]
check = [
    "mypy pytest_golden"
]

[tool.hatch.envs.style]
skip-install = true
dependencies = [
    "ruff",
    "isort",
    "black",
]
[tool.hatch.envs.style.scripts]
fix = [
    "ruff check --fix pytest_golden tests",
    "format",
]
format = [
    "isort -q pytest_golden tests",
    "black -q pytest_golden tests",
]

[tool.hatch.envs.docs]
detached = true
dependencies = [
    "mkdocs >=1.1.2",
    "mkdocs-material >=7.1.4",
    "pymdown-extensions >=8.2",
    "markdown-callouts >=0.1",
]

[tool.black]
line-length = 100

[tool.isort]
profile = "black"
line_length = 100

[tool.ruff]
select = [
    "F", "W", "E", "UP", "YTT", "C4", "FA", "PIE", "T20", "RSE", "TCH", "DTZ",
    "B002", "B003", "B005", "B007", "B009", "B012", "B013", "B014", "B015", "B018", "B020", "B021", "B023", "B026", "B033", "B034", "B905",
    "COM818",
    "PERF101",
    "PGH002", "PGH004", "PGH005",
    "PLE", "PLW0120", "PLW0127",
    "RUF001", "RUF007", "RUF010", "RUF100", "RUF200",
    "SIM101", "SIM107", "SIM201", "SIM202", "SIM208", "SIM210", "SIM211", "SIM300", "SIM401", "SIM910",
]
ignore = ["E501", "E731"]
[tool.ruff.flake8-comprehensions]
allow-dict-calls-with-keyword-arguments = true

[tool.mypy]
ignore_missing_imports = true
warn_unreachable = true
no_implicit_optional = true
show_error_codes = true

[tool.pytest.ini_options]
addopts = "--tb=native"
enable_assertion_pass_hook = true
filterwarnings = ["ignore::DeprecationWarning:.*:",
                  "default::DeprecationWarning:pytest_golden.*:"]
testpaths = ["tests"]
